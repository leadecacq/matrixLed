//
// letterList.h
// Arduino Led Matrix Code
//
// Created by Mathias de Cacqueray-Valmenier on 30/11/2018.
// Copyright (c) 2018 Mathias de Cacqueray-Valmenier. All rights reserved.
// Repository created by Mathias de Cacqueray-Valmenier, You should read LICENSE

#include <Arduino.h>


const uint8_t NB_ROWS = 10;
const uint8_t NB_COLS = 8;

const byte A[NB_ROWS] = {
	B00111100,
	B01111110,
	B11000111,
	B11000011,
	B11000011,
	B11111111,
	B11000011,
	B11000011,
	B11000011,
	B11000011
};
const byte B[NB_ROWS] = {
	B11111110,
	B11111111,
	B11000001,
	B11000001,
	B11111110,
	B11111110,
	B11000001,
	B11000001,
	B11111111,
	B11111110
};
const byte C[NB_ROWS] = {
	B00111111,
	B11111111,
	B11000001,
	B11000000,
	B11000000,
	B11000000,
	B11000000,
	B11000001,
	B01111111,
	B00111111
};
const byte D[NB_ROWS] = {
	B11111110,
	B11111111,
	B11000011,
	B11000001,
	B11000001,
	B11000001,
	B11000001,
	B11000011,
	B11111111,
	B11111110
};
const byte E[NB_ROWS] = {
	B11111111,
	B11111111,
	B11000000,
	B11000000,
	B11111110,
	B11111110,
	B11000000,
	B11000000,
	B11111111,
	B11111111
};
const byte F[NB_ROWS] = {
	B11111111,
	B11111111,
	B11000000,
	B11000000,
	B11111110,
	B11111110,
	B11000000,
	B11000000,
	B11000000,
	B11000000
};
const byte G[NB_ROWS] = {
	B01111110,
	B11111111,
	B11000011,
	B11000000,
	B11000000,
	B11001111,
	B11000011,
	B11000011,
	B11111111,
	B01111110
};
const byte H[NB_ROWS] = {
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B11111111,
	B11111111,
	B11000011,
	B11000011,
	B11000011,
	B11000011
};
const byte I[NB_ROWS] = {
	B11111111,
	B11111111,
	B00011000,
	B00011000,
	B00011000,
	B00011000,
	B00011000,
	B00011000,
	B11111111,
	B11111111
};
const byte J[NB_ROWS] = {
	B11111111,
	B11111111,
	B00000011,
	B00000011,
	B00000011,
	B00000011,
	B00000011,
	B11000111,
	B11111111,
	B11111110
};
const byte K[NB_ROWS] = {
	B11000011,
	B11000110,
	B11001100,
	B11011000,
	B11110000,
	B11110000,
	B11011000,
	B11001100,
	B11000110,
	B11000011
};
const byte L[NB_ROWS] = {
	B11000000,
	B11000000,
	B11000000,
	B11000000,
	B11000000,
	B11000000,
	B11000000,
	B11000000,
	B11111111,
	B11111111
};
const byte M[NB_ROWS] = {
	B11000011,
	B11100111,
	B11111111,
	B11011011,
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B11000011
};
const byte N[NB_ROWS] = {
	B11000011,
	B11100011,
	B11110011,
	B11011011,
	B11001111,
	B11000111,
	B11000011,
	B11000011,
	B11000011,
	B11000011
};
const byte O[NB_ROWS] = {
	B01111110,
	B11111111,
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B11111111,
	B01111110
};
const byte P[NB_ROWS] = {
	B11111110,
	B11111111,
	B11000011,
	B11000011,
	B11000011,
	B11111111,
	B11111110,
	B11000000,
	B11000000,
	B11000000
};
const byte Q[NB_ROWS] = {
	B01111110,
	B11111111,
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B11001011,
	B11001111,
	B11111110,
	B01111101
};
const byte R[NB_ROWS] = {
	B11111110,
	B11111111,
	B11000011,
	B11000011,
	B11111111,
	B11111110,
	B11011000,
	B11001100,
	B11000110,
	B11000011
};
const byte S[NB_ROWS] = {
	B01111110,
	B11111111,
	B11000011,
	B11000000,
	B11111110,
	B01111111,
	B00000011,
	B00000011,
	B11111111,
	B01111110
};
const byte T[NB_ROWS] = {
	B11111111,
	B11111111,
	B00011000,
	B00011000,
	B00011000,
	B00011000,
	B00011000,
	B00011000,
	B00011000,
	B00011000
};
const byte U[NB_ROWS] = {
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B11111111,
	B01111110
};
const byte V[NB_ROWS] = {
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B11000011,
	B01100110,
	B01100110,
	B00111100,
	B00011000
};
const byte W[NB_ROWS] = {
	B10000001,
	B10000001,
	B10010001,
	B10010001,
	B10010001,
	B10010001,
	B10010001,
	B10010001,
	B01100110,
	B01100110
};
const byte X[NB_ROWS] = {
	B11000011,
	B11000011,
	B11000011,
	B01100110,
	B00111100,
	B00111100,
	B01100110,
	B11000011,
	B11000011,
	B11000011,
};
const byte Y[NB_ROWS] = {
	B11000011,
	B11000011,
	B11000011,
	B01100110,
	B00111100,
	B00011000,
	B00011000,
	B00011000,
	B00011000,
	B00011000
};
const byte Z[NB_ROWS] = {
	B11111111,
	B11111111,
	B00000011,
	B00000110,
	B00001100,
	B00111000,
	B01100000,
	B11000000,
	B11111111,
	B11111111
};
const byte ALL[NB_ROWS] = {
	B11111111,B11111111,B11111111,B11111111,
	B11111111,B11111111,B11111111,B11111111,
	B11111111,B11111111
};
const byte EMPTY[NB_ROWS] = {
	B00000000,
	B00000000,
	B00000000,
	B00000000,
	B00000000,
	B00000000,
	B00000000,
	B00000000,
	B00000000,
	B00000000
};
byte customArray[NB_ROWS] = {
	B00000000,
	B00000000,
	B00000000,
	B00000000,
	B00000000,
	B00000000,
	B00000000,
	B00000000,
	B00000000,
	B00000000
};

const uint8_t NB_LETERS = 26;

const uint8_t * ALL_LETERS[NB_LETERS] = {
	A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z
};